Description: Resources for BridgeServer2 Application
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AppDeployBucket:
    Type: String
  AppHealthcheckUrl:
    Type: String
    Description: The AWS EB health check path
  AttachmentBucket:
    Type: String
  AwsAutoScalingMaxSize:
    Type: String
    Default: '1'
  AwsAutoScalingMinSize:
    Type: String
    Default: '1'
  AwsEbHealthReportingSystem:
    Type: String
    Default: basic
    AllowedValues:
      - basic
      - enhanced
    ConstraintDescription: must be either basic or enhanced
  AwsSnsBounceNotificationEndpoint:
    Type: String
    Description: Email address for SNS bounce notifications
  AwsSnsNotificationEndpoint:
    Type: String
    Description: Email address for AWS SNS notifications
  BootstrapAdminEmail:
    Type: String
  BootstrapAdminPassword:
    Type: String
    NoEcho: true
  BridgeEnv:
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - uat
      - dev
    ConstraintDescription: must specify dev, uat or prod.
  BridgeDBStackName:
    Type: String
    Description: Name of the corresponding DB stack. Used to import DB information (security groups, endpoints)
  BridgeHealthcodeRedisKey:
    Type: String
    NoEcho: true
  BridgeUser:
    Type: String
    Default: heroku
  BucketSuffix:
    Type: String
  DNSDomain:
    Type: String
    Description: DNS Domain name for deployment
    Default: sagebridge.org
  DNSHostname:
    Type: String
    Description: DNS Hostname for deployment
  EC2InstanceType:
    Type: String
    Description: Instance type to use for Elastic Beanstalk Instances
    Default: t2.small
  Env:
    Type: String
    Default: develop
    AllowedValues:
      - production
      - staging
      - develop
  ExporterRequestSqsQueueUrl:
    Type: String
  ExporterSynapseAccessToken:
    Type: String
    NoEcho: true
  ExporterSynapseUser:
    Type: String
  HibernateConnectionPassword:
    Type: String
    NoEcho: true
  HibernateConnectionUsername:
    Type: String
    NoEcho: true
  HibernateConnectionUsessl:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false
  HostPostfix:
    Type: String
  RollingUpdateType:
    Type: String
    Default: Time
    AllowedValues:
      - Time
      - Health
      - Immutable
  RollingUpdateDeploymentPolicy:
    Type: String
    Default: Rolling
    AllowedValues:
      - AllAtOnce
      - Rolling
      - RollingWithAdditionalBatch
      - Immutable
  SesNotificationTopicArn:
    Type: String
  SynapseAccessToken:
    Type: String
    NoEcho: true
  SynapseUser:
    Type: String
  SynapseOAuthClientId:
    Type: String
    Description: The OAuth client registered with Synapse that enables BSM sign in via Synapse
  SynapseOAuthClientSecret:
    Type: String
    NoEcho: true
    Description: The OAuth client registered with Synapse that enables BSM sign in via Synapse
  UddSqsQueueUrl:
    Type: String
  UseHttpsForwarding:
    Type: String
    # Change this back to true when we have an SSL Cert
    Default: false   
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false
Conditions:
  CreateR53Record: !Equals [ !Ref BridgeEnv, prod ]
Resources:
  LoadBalancerAccessLogsBucket:
    Type: 'AWS::S3::Bucket'
  LoadBalancerAccessLogsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref LoadBalancerAccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ModAccess
            Action:
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - !GetAtt LoadBalancerAccessLogsBucket.Arn
                  - '/*'
            Principal:
              AWS:
                - 127311923021
  AWSEBConfigurationTemplate:
    Type: 'AWS::ElasticBeanstalk::ConfigurationTemplate'
    Properties:
      ApplicationName: !ImportValue us-east-1-bridgeserver2-common-BeanstalkAppName
      SolutionStackName: '64bit Amazon Linux 2 v4.6.0 running Tomcat 8.5 Corretto 8'
      OptionSettings:
        # EB environment options
        - Namespace: 'aws:autoscaling:asg'
          OptionName: MaxSize
          Value: !Ref AwsAutoScalingMaxSize
        - Namespace: 'aws:autoscaling:asg'
          OptionName: MinSize
          Value: !Ref AwsAutoScalingMinSize
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: IamInstanceProfile
          Value: !Ref AWSIAMInstanceProfile
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: InstanceType
          Value: !Ref EC2InstanceType
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: RootVolumeType
          Value: gp3
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: RootVolumeSize
          Value: '16'
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: SecurityGroups
          Value: !Ref AWSEC2SecurityGroup
        - Namespace: 'aws:autoscaling:updatepolicy:rollingupdate'
          OptionName: RollingUpdateEnabled
          Value: 'true'
        - Namespace: 'aws:autoscaling:updatepolicy:rollingupdate'
          OptionName: RollingUpdateType
          Value: !Ref RollingUpdateType
        - Namespace: 'aws:elasticbeanstalk:command'
          OptionName: DeploymentPolicy
          Value: !Ref RollingUpdateDeploymentPolicy
        - Namespace: 'aws:elasticbeanstalk:command'
          OptionName: BatchSizeType
          Value: 'Fixed'
        - Namespace: 'aws:elasticbeanstalk:command'
          OptionName: BatchSize
          Value: '1'
        # Public,Public1,Public2
        - Namespace: 'aws:ec2:vpc'
          OptionName: ELBSubnets
          Value: !Join
            - ','
            - - 'subnet-00e1112781e2100b0'
              - 'subnet-05a42a6abdb678332'
              - 'subnet-0717a03d09d1299dc'
        # Private,Private1,Private2
        - Namespace: 'aws:ec2:vpc'
          OptionName: Subnets
          Value: !Join
            - ','
            - - 'subnet-0c914eb7292a302fc'
              - 'subnet-09790b48060420f4c'
              - 'subnet-074665325c1b2aa25'
        - Namespace: 'aws:ec2:vpc'
          OptionName: VPCId
          Value: 'vpc-08383f78519fe72ef'
        - Namespace: 'aws:ec2:vpc'
          OptionName: AssociatePublicIpAddress
          Value: 'false'
        - Namespace: 'aws:elasticbeanstalk:application'
          OptionName: Application Healthcheck URL
          Value: !Ref AppHealthcheckUrl
        - Namespace: 'aws:elasticbeanstalk:cloudwatch:logs'
          OptionName: StreamLogs
          Value: 'true'
        - Namespace: 'aws:elasticbeanstalk:cloudwatch:logs'
          OptionName: DeleteOnTerminate
          Value: 'true'
        - Namespace: 'aws:elasticbeanstalk:cloudwatch:logs'
          OptionName: RetentionInDays
          Value: '90'
        - Namespace: 'aws:elasticbeanstalk:container:tomcat:jvmoptions'
          OptionName: Xmx
          Value: '1024m'
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: ServiceRole
          Value: !ImportValue us-east-1-bridgeserver2-common-BeanstalkServiceRole
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: Protocol
          Value: 'HTTP'
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: HealthCheckPath
          Value: !Ref AppHealthcheckUrl
        - Namespace: 'aws:elasticbeanstalk:healthreporting:system'
          OptionName: ConfigDocument
          Value: '{
            "Rules": {
              "Environment": {
                "Application": {
                  "ApplicationRequests4xx": {
                    "Enabled": false
                  }
                },
                "ELB": {
                  "ELBRequests4xx": {
                    "Enabled": false
                  }
                }
              }
            },
            "Version": 1
          }'
        - Namespace: 'aws:elasticbeanstalk:healthreporting:system'
          OptionName: SystemType
          Value: !Ref AwsEbHealthReportingSystem
        - Namespace: 'aws:elasticbeanstalk:hostmanager'
          OptionName: LogPublicationControl
          Value: 'true'
        - Namespace: 'aws:elasticbeanstalk:xray'
          OptionName: XRayEnabled
          Value: 'false'
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: LoadBalancerType
          Value: 'application'
        - Namespace: 'aws:elbv2:loadbalancer'
          OptionName: AccessLogsS3Bucket
          Value: !Ref LoadBalancerAccessLogsBucket
        - Namespace: 'aws:elbv2:loadbalancer'
          OptionName: AccessLogsS3Enabled
          Value: 'true'
        - Namespace: 'aws:elbv2:listener:default'
          OptionName: Protocol
          Value: HTTP
        # Application environment options
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: admin.email
          Value: !Ref BootstrapAdminEmail
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: admin.password
          Value: !Ref BootstrapAdminPassword
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: ENV
          Value: !Ref Env
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: bridge.env
          Value: !Ref BridgeEnv
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: bridge.healthcode.redis.key
          Value: !Ref BridgeHealthcodeRedisKey
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: bridge.user
          Value: !Ref BridgeUser
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: elasticache.new.url
          Value: !Join
            - ''
            - - 'redis://'
              - !GetAtt ElasticacheCluster.RedisEndpoint.Address
              - ':'
              - !GetAtt ElasticacheCluster.RedisEndpoint.Port
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: elasticache.url
          Value: !Join
            - ''
            - - 'redis://'
              - !GetAtt ElasticacheCluster.RedisEndpoint.Address
              - ':'
              - !GetAtt ElasticacheCluster.RedisEndpoint.Port
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: exporter.request.sqs.queue.url
          Value: !Ref ExporterRequestSqsQueueUrl
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: exporter.synapse.access.token
          Value: !Ref ExporterSynapseAccessToken
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: exporter.synapse.user
          Value: !Ref ExporterSynapseUser
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: !Join
            - ''
            - - !Ref BridgeEnv
              - '.bucket.suffix'
          Value: !Ref BucketSuffix
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: hibernate.connection.password
          Value: !Ref HibernateConnectionPassword
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: hibernate.connection.url
          Value: !Join
            - ''
            - - 'jdbc:mysql://'
              - Fn::ImportValue: !Sub "${AWS::Region}-${BridgeDBStackName}-DatabaseEndpointAddress"
              - ':3306/BridgeDB'
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: hibernate.connection.username
          Value: !Ref HibernateConnectionUsername
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: hibernate.connection.useSSL
          Value: !Ref HibernateConnectionUsessl
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: !Join
            - ''
            - - !Ref BridgeEnv
              - '.host.postfix'
          Value: !Ref HostPostfix
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: ses.notification.topic.arn
          Value: !Ref SesNotificationTopicArn
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: synapse.access.token
          Value: !Ref SynapseAccessToken
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: synapse.user
          Value: !Ref SynapseUser
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: synapse.oauth.client.id
          Value: !Ref SynapseOAuthClientId
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: synapse.oauth.client.secret
          Value: !Ref SynapseOAuthClientSecret
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: udd.sqs.queue.url
          Value: !Ref UddSqsQueueUrl
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: use.https.forwarding
          Value: !Ref UseHttpsForwarding
  AWSEBEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      ApplicationName: !ImportValue us-east-1-bridgeserver2-common-BeanstalkAppName
      TemplateName: !Ref AWSEBConfigurationTemplate
      EnvironmentName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
      Tier:
        Name: WebServer
        Type: Standard
  ElasticacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ElasticacheSecurityGroup
      VpcId: 'vpc-08383f78519fe72ef'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref AWSEC2SecurityGroup
  ElasticacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: !Join
          - '-'
          - - !Ref 'AWS::StackName'
            - ElasticacheSubnetGroup
      SubnetIds:
        - 'subnet-00e1112781e2100b0'
        - 'subnet-05a42a6abdb678332'
        - 'subnet-0717a03d09d1299dc'
        - 'subnet-0c914eb7292a302fc'
        - 'subnet-09790b48060420f4c'
        - 'subnet-074665325c1b2aa25'
  ElasticacheCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      Engine: redis
      EngineVersion: '7.0'
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !GetAtt ElasticacheSecurityGroup.GroupId
      CacheSubnetGroupName: !Ref ElasticacheSubnetGroup
  ElasticacheReplicationGroup:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      ReplicationGroupDescription: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ElasticacheReplicationGroup
      AutomaticFailoverEnabled: false
      PrimaryClusterId: !Ref ElasticacheCluster
      ReplicasPerNodeGroup: 1
  AWSEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - AWSEC2SecurityGroup
      GroupDescription: EC2 Security Group
      VpcId: 'vpc-08383f78519fe72ef'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AWSLBSecurityGroup
  AWSEC2ToRdsNewSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId:
        Fn::ImportValue: !Sub "${AWS::Region}-${BridgeDBStackName}-RdsNewVpcSecurityGroup"
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref AWSEC2SecurityGroup
  AWSLBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: 'vpc-08383f78519fe72ef'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
  AWSS3AppDeployBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref AppDeployBucket
  AWSR53RecordSet:
    Type: 'AWS::Route53::RecordSet'
    # This check is bugged. See https://github.com/aws-cloudformation/cfn-python-lint/issues/1425
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E3012
    # If CreateR53Record is set true, then Record is created.
    # CreateR53Record is true when BridgeEnv is prod
    Condition: CreateR53Record
    Properties:
      # Name of the hosted zone that you want to create records in
      # If AWS CloudFormation cannot find a hosted zone with a matching domain name, AWS CloudFormation will not create the stack.
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-recordset.html
      HostedZoneName: !Join
        - ''
        - - !Ref DNSDomain
          - .
      # Name of a record in the specified hosted zone. Full domain name for the DNS record being created.
      # If DNSHostname is bridgeserver2-prod and DNSDomain is biaffectbridge.com,
      # the Name will be bridgeserver2-prod.biaffectbridge.com.
      Name: !Join
        - ''
        - - !Ref DNSHostname
          - .
          - !Ref DNSDomain
          - .
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !GetAtt
          - AWSEBEnvironment
          - EndpointURL
  AWSR53HealthCheck:
    Type: "AWS::Route53::HealthCheck"
    DependsOn: AWSR53RecordSet
    Condition: CreateR53Record
    Properties:
      HealthCheckConfig:
        FullyQualifiedDomainName: !GetAtt AWSEBEnvironment.EndpointURL
        Port: 443
        Type: "HTTPS"
        ResourcePath: "/"
      HealthCheckTags:
        -
          Key: "Name"
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSR53HealthCheck
  # cloudwatch integration https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.cloudwatchlogs.html
  AWSIAMCloudwatchIntegrationManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:GetLogEvents'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeLogStreams'
              - 'logs:PutRetentionPolicy'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:*:*'
  AWSIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref IAMBridgeServer2ECManagedPolicy
        - !Ref AWSIAMCloudwatchIntegrationManagedPolicy
  AWSIAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref AWSIAMRole
  AWSSNSBounceTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref AwsSnsBounceNotificationEndpoint
          Protocol: "email"
  AWSSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref AwsSnsNotificationEndpoint
          Protocol: "email"
  AWSLogsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - '/'
        - - /aws/elasticbeanstalk
          - !Ref 'AWS::StackName'
          - var/log/tomcat8/catalina.out
      RetentionInDays: 90
  AWSCWRequestErrorMetricFilter:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: AWSLogsLogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - /aws/elasticbeanstalk
          - !Ref 'AWS::StackName'
          - var/log/tomcat8/catalina.out
      FilterPattern: 'ERROR - org.hibernate'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "LogMetrics/Errors"
          MetricName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ErrorCount
  AWSCWRequestErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ErrorCount
      Namespace: LogMetrics/Errors
      Period: 3600
      Statistic: Sum
      Threshold: 10
      TreatMissingData: notBreaching
  AWSCWRequestWarningMetricFilter:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: AWSLogsLogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - /aws/elasticbeanstalk
          - !Ref 'AWS::StackName'
          - var/log/tomcat8/catalina.out
      FilterPattern: 'WARN'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "LogMetrics/Warnings"
          MetricName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - WarningCount
  AWSCWRequestWarningAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - WarningCount
      Namespace: LogMetrics/Warnings
      Period: 3600
      Statistic: Sum
      Threshold: 100
      TreatMissingData: notBreaching
  AWSCWThroughputExceptionMetricFilter:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: AWSLogsLogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - /aws/elasticbeanstalk
          - !Ref 'AWS::StackName'
          - var/log/tomcat8/catalina.out
      FilterPattern: 'ProvisionedThroughputExceededException'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "LogMetrics/Exceptions"
          MetricName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ThroughputExceededExceptionCount
  AWSCWThroughputExceptionAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ThroughputExceededExceptionCount
      Namespace: LogMetrics/Exceptions
      Period: 3600
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
  AWSCW4XXMetricFilter:
    Type: "AWS::Logs::MetricFilter"
    DependsOn: AWSLogsLogGroup
    Properties:
      LogGroupName: !Join
        - '/'
        - - /aws/elasticbeanstalk
          - !Ref 'AWS::StackName'
          - var/log/tomcat8/catalina.out
      FilterPattern: '{ ($.status >= 400) && ($.status < 500) && ($.status != 401) }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "LogMetrics/4XXs"
          MetricName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - 4XXCount
  AWSCW4XXAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - 4XXCount
      Namespace: LogMetrics/4XXs
      Period: 3600
      Statistic: Sum
      Threshold: 1000
      TreatMissingData: notBreaching
  AWSCWCpuUtilizationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 900
      Statistic: Average
      Threshold: 80
  AWSCWEnvironmentHealthAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: EnvironmentHealth
      Namespace: AWS/ElasticBeanstalk
      Dimensions:
        - Name: "EnvironmentName"
          Value: !Ref 'AWS::StackName'
      Period: 3600
      Statistic: Average
      # Note: 20 is "warning", which can happen if an entire host is down.
      Threshold: 20
  AWSCWHealthCheckStatusAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateR53Record
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AWSSNSTopic
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Dimensions:
        -
          "Name": "HealthCheckId"
          "Value": !Ref AWSR53HealthCheck
      Period: 300
      Statistic: Average
      Threshold: 1
  IAMBridgeServer2ECManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Deny
            Action:
              - elasticache:DeleteCacheCluster
              - elasticache:DeleteCacheParameterGroup
              - elasticache:DeleteCacheSecurityGroup
              - elasticache:DeleteCacheSubnetGroup
              - elasticache:DeleteReplicationGroup
              - elasticache:DeleteSnapshot
            Resource: "*"
          - Effect: Allow
            Action:
              - elasticache:*
            Resource: "*"
  AWSIAMBridgeServer2ServiceUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref AWSIAMBridgeServer2ServiceUser2
  AWSIAMBridgeServer2ServiceUser2:
    Type: 'AWS::IAM::User'
    Properties:
      Groups:
        - !Ref AWSIAMBridgeServer2ServiceUserGroup
  AWSIAMBridgeServer2ServiceUserGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref IAMBridgeServer2ECManagedPolicy
  # KMS Keys
  AWSKmsKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: !Join
        - '-'
        - - !Ref AWS::StackName
          - "KmsKey"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - 'arn:aws:iam::381492192635:role/cf.service'
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - 'arn:aws:iam::381492192635:role/cf.service'
                - !GetAtt AWSIAMRole.Arn
                - !ImportValue us-east-1-bridgeserver2-common-BeanstalkServiceRoleArn
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
  AWSKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - 'alias/'
          - !Ref AWS::StackName
          - '/KmsKey'
      TargetKeyId: !Ref AWSKmsKey
  SynapseExternalStoragePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: AttachmentBucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::325565585839:root"
            Action:
              - "s3:ListBucket*"
              - "s3:GetBucketLocation"
            Resource:
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref AttachmentBucket
          - Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::325565585839:root"
            Action:
              - "s3:GetObject*"
              - "s3:*MultipartUpload*"
            Resource:
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref AttachmentBucket
                  - "/*"
Outputs:
  AppPublicEndpoint:
    Value: !Join
      - ''
      - - 'https://'
        - !Ref DNSHostname
        - .
        - !Ref DNSDomain
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AppPublicEndpoint'
  AWSKmsKey:
    Value: !Ref AWSKmsKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-KmsKey'
  AWSKmsKeyAlias:
    Value: !Ref AWSKmsKeyAlias
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-KmsKeyAlias'
  AWSS3AppDeployBucket:
    Value: !Ref AWSS3AppDeployBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AppDeployBucket'
  AWSEBEnvironment:
    Value: !Ref AWSEBEnvironment
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Environment'
  AWSEBEnvironmentUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - AWSEBEnvironment
          - EndpointURL
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EnvironmentUrl'
  AWSEC2SecurityGroup:
    Value: !Ref AWSEC2SecurityGroup
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EC2SecurityGroup'
  AWSIAMBridgeServer2ServiceUserAccessKey:
    Value: !Ref AWSIAMBridgeServer2ServiceUserAccessKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BridgeServer2ServiceUserAccessKey'
  AWSIAMBridgeServer2ServiceUserSecretAccessKey:
    Value: !GetAtt AWSIAMBridgeServer2ServiceUserAccessKey.SecretAccessKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-BridgeServer2ServiceUserSecretAccessKey'
